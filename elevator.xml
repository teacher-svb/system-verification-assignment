<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>

// constants and variable related to number of floors 
const int N = 3;         // # floors 
typedef int[0,N-1] id_f; // floor id from 0 to N-1

const int E = 2;         // # elevators  
typedef int[0,E-1] id_e; // elevator id from 0 to N-1



int num_floors_per_elevator = ((N-1) + (E - 1)) / E;

// cabin door channels and constants
chan open_door[id_e], close_door[id_e], door_open[id_e], door_closed[id_e]; // channels for a door
const int door_time = 2;     // time to open or close the door



// protecting door channels and constants
chan open_pdoor[id_e][id_f], close_pdoor[id_e][id_f], pdoor_open[id_e][id_f], pdoor_closed[id_e][id_f]; // channels for a door

// engine channels
chan stop[id_e], move_down[id_e], move_up[id_e];


// floor sensors channels and constants
const int floor_time = 1; // time to travel one floor
chan start_sensors[id_e],stop_sensors[id_e],reach_floor[id_e];


// button channels
chan req[id_f];

// communications between RequestHandler and MainControl
chan go[id_e], served[id_e];

// Place global declarations here.
int max_wait = 6; 

// The current floor of the elevator:
id_f current_floor[E]; 

// The floor to which the main control is requested to go to.
// This variable is just used for communication between the request handler and the main control.
// Therefore, we can declare it meta (i.e., not part of the state).
meta id_f target_floor;</declaration>
	<template>
		<name>engine</name>
		<parameter>id_e my_elevator</parameter>
		<location id="id0" x="16" y="-168">
			<committed/>
		</location>
		<location id="id1" x="-256" y="-168">
			<committed/>
		</location>
		<location id="id2" x="-112" y="-80">
			<committed/>
		</location>
		<location id="id3" x="-256" y="-48">
			<name x="-360" y="-80">moving_down</name>
		</location>
		<location id="id4" x="16" y="-48">
			<name x="24" y="-80">moving_up</name>
		</location>
		<location id="id5" x="-112" y="-168">
			<name x="-122" y="-198">Idle</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="24" y="-128">start_sensors[my_elevator]!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-433" y="-136">start_sensors[my_elevator]!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-195" y="-127">stop_sensors[my_elevator]!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-238" y="-42">stop[my_elevator]?</label>
			<nail x="-216" y="-48"/>
			<nail x="-112" y="-48"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-297" y="-204">move_down[my_elevator]?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-93" y="-42">stop[my_elevator]?</label>
			<nail x="-40" y="-48"/>
			<nail x="-112" y="-48"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-85" y="-204">move_up[my_elevator]?</label>
		</transition>
	</template>
	<template>
		<name>button</name>
		<declaration>clock x;</declaration>
		<location id="id6" x="-32" y="-8">
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="select" x="-48" y="-112">i : id_f</label>
			<label kind="guard" x="-48" y="-96">x &gt;=1</label>
			<label kind="synchronisation" x="-48" y="-80">req[i]!</label>
			<label kind="assignment" x="-48" y="-64">x=0</label>
			<label kind="comments" x="-119" y="-170">i identifies the requested floor.</label>
			<nail x="-64" y="-48"/>
			<nail x="0" y="-48"/>
		</transition>
	</template>
	<template>
		<name>request_handler</name>
		<parameter>id_e my_elevator</parameter>
		<declaration>// The dummy request handler gets requests from the button.
// When these are received, they are stored in the following local variable.
id_f current_req;

clock x;


// Before beginning with the assignment, you should take some time understand how a request is send from the button to the dummy request handler.
// This communication uses a parametrized channel "req". Basically, for each floor i there is a channel req[i].
// Another way of providing communication makes use of global variables.
// An example is the way the request handler sends a go signal to the main control.
// A global variable is used (target_floor, see "Declarations" of the project). When sending a go, the request handler puts a value into this global variable.
// When receiving a go, the main control takes this value and immediately sets it to zero. In UPPAAL, this is a very efficient way of encoding a synchronous communication.


// The dummy request handler can only deal with one request at a time.
// Only after the request has been served, a new request can be received.
// The first part of the task tells you how to build a FIFO request handler.
// This handler receives requests and stores them in a queue.
// The following code defines this queue.
// Size of the queue:
const int size = 5; 

// Local queue storing the requests.
id_f list[size];
int[0,size] len = 0;


// some clocks for prop7. couldn't finish this in time
// clock request_clocks[size];


// Put an element at the end of the queue
// Current allocation scheme is a FIFO
// might not be the smartest scheme but it ensures
// that all requests are served ...
// until the FIFO is full. Then it simply 
// ignores all requests. 
void enqueue(id_f element)
{
        list[len++] = element;
}

bool is_req_for_lift(id_f element) {
    return my_elevator == (element-1)/num_floors_per_elevator;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
}



// Returns the front element of the queue
id_f front()
{
   return list[0];
}

// Returns the last element of the queue
id_f last()
{
   return list[len - 1];
}

bool is_empty ()
{
	return len == 0;
}

bool is_full ()
{
	return len == size;
}
</declaration>
		<location id="id7" x="-1343" y="-1555">
			<name x="-1335" y="-1589">checking_input</name>
			<label kind="invariant" x="-1326" y="-1572">is_req_for_lift(current_req)</label>
			<committed/>
		</location>
		<location id="id8" x="-2218" y="-1666">
			<name x="-2228" y="-1700">initial_state</name>
		</location>
		<location id="id9" x="-2218" y="-1555">
			<name x="-2414" y="-1564">arrived_at_final_destination</name>
		</location>
		<location id="id10" x="-2014" y="-1266">
			<name x="-2024" y="-1300">processing_inputs</name>
			<committed/>
		</location>
		<location id="id11" x="-2006" y="-1096">
			<name x="-2048" y="-1079">arrived_at_floor</name>
		</location>
		<location id="id12" x="-1657" y="-1555">
			<name x="-1657" y="-1606">awaiting_input</name>
			<label kind="invariant" x="-1657" y="-1589">x &lt;= max_wait</label>
		</location>
		<location id="id13" x="-1564" y="-1266">
			<name x="-1615" y="-1249">process_queue</name>
			<committed/>
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-1581" y="-1487">x &gt;= max_wait &amp;&amp;
!is_empty()</label>
			<nail x="-1564" y="-1411"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id13"/>
			<label kind="assignment" x="-1453" y="-1402">enqueue(current_req)</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="guard" x="-1853" y="-1666">x &gt;= max_wait &amp;&amp;
is_empty()</label>
			<label kind="assignment" x="-1853" y="-1624">x := 0</label>
			<nail x="-1785" y="-1581"/>
			<nail x="-1785" y="-1632"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-2193" y="-1096">served[my_elevator]?</label>
			<label kind="assignment" x="-2193" y="-1079">x := 0</label>
			<nail x="-2108" y="-1096"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-1895" y="-1096">!is_empty()</label>
			<label kind="synchronisation" x="-1895" y="-1079">go[my_elevator]!</label>
			<label kind="assignment" x="-1895" y="-1062">target_floor := front(),
dequeue(),
x := 0</label>
			<nail x="-1878" y="-1096"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id10"/>
			<label kind="guard" x="-1793" y="-1258">is_full() || x &gt;= max_wait</label>
			<label kind="assignment" x="-1793" y="-1241">x := 0</label>
			<nail x="-1776" y="-1266"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-1793" y="-1377">!is_full() &amp;&amp; x &lt; max_wait</label>
			<nail x="-1657" y="-1411"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-2125" y="-1547">served[my_elevator]?</label>
			<label kind="assignment" x="-2125" y="-1530">x := 0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="-2329" y="-1640">go[my_elevator]!</label>
			<label kind="assignment" x="-2329" y="-1623">x := 0</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-2210" y="-1394">is_empty()</label>
			<label kind="synchronisation" x="-2210" y="-1377">go[my_elevator]!</label>
			<label kind="assignment" x="-2210" y="-1360">target_floor := 0,
x := 0</label>
			<nail x="-2218" y="-1266"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id7"/>
			<label kind="select" x="-1521" y="-1632">i : id_f</label>
			<label kind="guard" x="-1521" y="-1615">x &lt; max_wait</label>
			<label kind="synchronisation" x="-1521" y="-1598">req[i]?</label>
			<label kind="assignment" x="-1521" y="-1581">current_req := i</label>
		</transition>
	</template>
	<template>
		<name>floor_sensors</name>
		<parameter>id_e my_elevator</parameter>
		<declaration>clock x;</declaration>
		<location id="id14" x="32" y="-24">
			<name x="40" y="-72">moving</name>
			<label kind="invariant" x="40" y="-56">x &lt;= floor_time</label>
		</location>
		<location id="id15" x="-200" y="-24">
			<name x="-264" y="-16">idle</name>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-120" y="-112">stop_sensors[my_elevator]?</label>
			<nail x="32" y="-88"/>
			<nail x="-200" y="-88"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="guard" x="136" y="-24">x &gt;= floor_time</label>
			<label kind="synchronisation" x="136" y="-8">reach_floor[my_elevator]!</label>
			<label kind="assignment" x="136" y="8">x := 0</label>
			<nail x="128" y="-24"/>
			<nail x="128" y="32"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-178" y="-51">start_sensors[my_elevator]?</label>
			<label kind="assignment" x="-104" y="-16">x := 0</label>
		</transition>
	</template>
	<template>
		<name>cabin_door</name>
		<parameter>id_e my_elevator</parameter>
		<declaration>clock x;</declaration>
		<location id="id16" x="-280" y="40">
			<committed/>
		</location>
		<location id="id17" x="152" y="40">
			<committed/>
		</location>
		<location id="id18" x="200" y="-232">
			<committed/>
		</location>
		<location id="id19" x="-280" y="-232">
			<committed/>
		</location>
		<location id="id20" x="200" y="-88">
			<name x="216" y="-96">closed</name>
		</location>
		<location id="id21" x="-96" y="-88">
			<name x="-80" y="-88">executing</name>
			<label kind="invariant" x="-80" y="-104">x &lt;= door_time</label>
		</location>
		<location id="id22" x="-280" y="-88">
			<name x="-328" y="-96">open</name>
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id21"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-416" y="59">pdoor_open[my_elevator][current_floor[my_elevator]]?</label>
			<label kind="comments" x="-289" y="102">check if the protective door is open</label>
			<nail x="-104" y="40"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-56" y="48">open_pdoor[my_elevator][current_floor[my_elevator]]!</label>
			<label kind="comments" x="-34" y="93">before opening, open the protective door first</label>
			<nail x="-80" y="40"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-59" y="-263">pdoor_closed[my_elevator][current_floor[my_elevator]]?</label>
			<label kind="comments" x="-62" y="-207">check if the protective door is closed</label>
			<nail x="-80" y="-232"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-442" y="-263">close_pdoor[my_elevator][current_floor[my_elevator]]!</label>
			<label kind="comments" x="-357" y="-289">before closing, first close the protective door</label>
			<nail x="-104" y="-232"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id22"/>
			<label kind="guard" x="-392" y="-48">x &gt;= door_time</label>
			<label kind="synchronisation" x="-450" y="-34">door_open[my_elevator]!</label>
			<label kind="assignment" x="-392" y="-16">x := 0</label>
			<label kind="comments" x="-484" y="17">only then open the cabin door</label>
			<nail x="-280" y="-32"/>
			<nail x="-280" y="-48"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="204" y="-42">open_door[my_elevator]?</label>
			<label kind="assignment" x="208" y="-16">x := 0</label>
			<nail x="200" y="40"/>
			<nail x="152" y="40"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id20"/>
			<label kind="guard" x="208" y="-184">x &gt;= door_time</label>
			<label kind="synchronisation" x="208" y="-168">door_closed[my_elevator]!</label>
			<label kind="assignment" x="208" y="-152">x := 0</label>
			<label kind="comments" x="212" y="-212">only then close the cabin door</label>
			<nail x="200" y="-160"/>
			<nail x="200" y="-144"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-467" y="-187">close_door[my_elevator]?</label>
			<label kind="assignment" x="-352" y="-168">x := 0</label>
			<nail x="-280" y="-160"/>
			<nail x="-280" y="-168"/>
		</transition>
	</template>
	<template>
		<name>main_control</name>
		<parameter>id_e my_elevator</parameter>
		<declaration>id_f dest_floor = 0; // the current destination</declaration>
		<location id="id23" x="-1810" y="-1258">
			<name x="-1929" y="-1275">elevator_waiting</name>
		</location>
		<location id="id24" x="-1479" y="-1258">
			<name x="-1657" y="-1292">elevator_handling_request</name>
			<committed/>
		</location>
		<location id="id25" x="-1088" y="-1258">
			<name x="-1130" y="-1232">door_closing</name>
		</location>
		<location id="id26" x="-841" y="-1258">
			<name x="-875" y="-1241">door_is_closed</name>
			<committed/>
		</location>
		<location id="id27" x="-569" y="-1258">
			<name x="-595" y="-1300">moving</name>
		</location>
		<location id="id28" x="-1071" y="-969">
			<name x="-1081" y="-1003">stopped</name>
			<committed/>
		</location>
		<location id="id29" x="-1479" y="-969">
			<name x="-1470" y="-1003">opening_door</name>
		</location>
		<location id="id30" x="-1810" y="-969">
			<name x="-1912" y="-977">system_start</name>
		</location>
		<location id="id31" x="-1810" y="-1113">
			<name x="-1989" y="-1122">initialising_opening_door</name>
		</location>
		<location id="id32" x="-212" y="-1258">
			<name x="-222" y="-1292">checking_floor</name>
			<committed/>
		</location>
		<init ref="id30"/>
		<transition>
			<source ref="id32"/>
			<target ref="id27"/>
			<label kind="guard" x="-518" y="-1283">current_floor[my_elevator] != dest_floor</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-1980" y="-1198">door_open[my_elevator]?</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-1972" y="-1054">open_door[my_elevator]!</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-1470" y="-1139">door_open[my_elevator]?</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-1326" y="-960">open_door[my_elevator]!</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id28"/>
			<label kind="guard" x="-926" y="-960">current_floor[my_elevator] == dest_floor</label>
			<label kind="synchronisation" x="-926" y="-943">stop[my_elevator]!</label>
			<nail x="-212" y="-969"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id32"/>
			<label kind="guard" x="-518" y="-1164">current_floor[my_elevator] &gt; dest_floor</label>
			<label kind="synchronisation" x="-518" y="-1147">reach_floor[my_elevator]?</label>
			<label kind="assignment" x="-518" y="-1130">current_floor[my_elevator]--</label>
			<nail x="-391" y="-1164"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="-850" y="-1207">current_floor[my_elevator] &gt; dest_floor</label>
			<label kind="synchronisation" x="-850" y="-1190">move_down[my_elevator]!</label>
			<nail x="-714" y="-1215"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id32"/>
			<label kind="guard" x="-501" y="-1411">current_floor[my_elevator] &lt; dest_floor</label>
			<label kind="synchronisation" x="-501" y="-1394">reach_floor[my_elevator]?</label>
			<label kind="assignment" x="-501" y="-1377">current_floor[my_elevator]++</label>
			<nail x="-391" y="-1351"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="-850" y="-1343">current_floor[my_elevator] &lt; dest_floor</label>
			<label kind="synchronisation" x="-850" y="-1326">move_up[my_elevator]!</label>
			<nail x="-714" y="-1300"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-1054" y="-1258">door_closed[my_elevator]?</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="guard" x="-1394" y="-1258">current_floor[my_elevator] != dest_floor</label>
			<label kind="synchronisation" x="-1394" y="-1241">close_door[my_elevator]!</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-1734" y="-1249">go[my_elevator]?</label>
			<label kind="assignment" x="-1734" y="-1224">dest_floor := target_floor,
target_floor := 0</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="-1759" y="-1410">current_floor[my_elevator] == dest_floor</label>
			<label kind="synchronisation" x="-1759" y="-1394">served[my_elevator]!</label>
			<nail x="-1479" y="-1419"/>
			<nail x="-1810" y="-1419"/>
		</transition>
	</template>
	<template>
		<name>protecting_door</name>
		<parameter>id_f i, id_e my_elevator</parameter>
		<declaration>clock x;</declaration>
		<location id="id33" x="-112" y="8">
			<name x="-144" y="24">executing_open</name>
			<label kind="invariant" x="-144" y="40">x &lt;= door_time</label>
		</location>
		<location id="id34" x="40" y="-96">
			<name x="56" y="-104">closed</name>
		</location>
		<location id="id35" x="-112" y="-120">
			<name x="-96" y="-120">executing</name>
			<label kind="invariant" x="-144" y="-104">x &lt;= door_time</label>
		</location>
		<location id="id36" x="-232" y="-104">
			<name x="-280" y="-112">open</name>
		</location>
		<init ref="id34"/>
		<transition>
			<source ref="id33"/>
			<target ref="id36"/>
			<label kind="guard" x="-352" y="-80">x &gt;= door_time</label>
			<label kind="synchronisation" x="-433" y="-68">pdoor_open[my_elevator][i]!</label>
			<label kind="assignment" x="-352" y="-48">x := 0</label>
			<nail x="-232" y="8"/>
			<nail x="-232" y="-80"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="48" y="-64">open_pdoor[my_elevator][i]?</label>
			<label kind="assignment" x="48" y="-32">x := 0</label>
			<nail x="40" y="-32"/>
			<nail x="40" y="8"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id34"/>
			<label kind="guard" x="-88" y="-200">x &gt;= door_time</label>
			<label kind="synchronisation" x="-88" y="-184">pdoor_closed[my_elevator][i]!</label>
			<label kind="assignment" x="-88" y="-168">x := 0</label>
			<nail x="-96" y="-152"/>
			<nail x="40" y="-152"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="-348" y="-187">close_pdoor[my_elevator][i]?</label>
			<label kind="assignment" x="-200" y="-168">x := 0</label>
			<nail x="-232" y="-152"/>
			<nail x="-128" y="-152"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
//reqHandler_process = reqHandlerSimple();

//engineCtl_process = engineCtl();



// List one or more processes to be composed into a system.
system cabin_door, protecting_door,engine, floor_sensors, button, request_handler, main_control;</system>
	<queries>
		<query>
			<formula></formula>
			<comment>PROP 7 -X-              --- 
/* The time needed to serve a request is bounded by the product of the distance in 			*/
/* number of floors by the time needed to travel the distance of one floor plus twice the time it 	*/
/* takes to open or close the door. More formally the property is defined as follows. Let p be 		*/
/* the time to open or close the door. Let t be the time needed to cover the distance between two 	*/
/* is expressed as: 											*/
/* s ≤ d · t + 2 · p 											*/
</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment>PROP 6 --- safety       --- 
/* Whenever a request is served, the passengers will be able to leave the cabin */
/* Every node that contains a served request, is followed by an opening door node before another request is served. */</comment>
		</query>
		<query>
			<formula>/* elevator 0 */

A[] (main_control(0).elevator_waiting imply cabin_door(0).open)</formula>
			<comment> - PROP 6 - elevator 0</comment>
		</query>
		<query>
			<formula>/* elevator 1 */

A[] (main_control(1).elevator_waiting imply cabin_door(1).open)</formula>
			<comment> - PROP 6 - elevator 1</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment>PROP 5 --- liveness     --- 

/* All floor requests are eventually served, i.e., the elevator reaches its destination. */

/* Liveness property: something will eventually happen. */</comment>
		</query>
		<query>
			<formula>/*floor 1 gets elevator 0 */

(request_handler(0).checking_input &amp;&amp; request_handler(0).current_req == 1) --&gt; (main_control(0).stopped &amp;&amp; current_floor[0] == 1)
</formula>
			<comment> - PROP 5 - floor 1</comment>
		</query>
		<query>
			<formula>/*floor 2 gets elevator 0 */

(request_handler(0).checking_input &amp;&amp; request_handler(0).current_req == 2) --&gt; (main_control(0).stopped &amp;&amp; current_floor[0] == 2)
</formula>
			<comment> - PROP 5 - floor 2</comment>
		</query>
		<query>
			<formula>/*floor 3 gets elevator 0 */

(request_handler(0).checking_input &amp;&amp; request_handler(0).current_req == 3) --&gt; (main_control(0).stopped &amp;&amp; current_floor[0] == 3)
</formula>
			<comment> - PROP 5 - floor 3</comment>
		</query>
		<query>
			<formula>/*floor 4 gets elevator 1 */

(request_handler(1).checking_input &amp;&amp; request_handler(1).current_req == 4) --&gt; (main_control(1).stopped &amp;&amp; current_floor[1] == 4)
</formula>
			<comment> - PROP 5 - floor 4</comment>
		</query>
		<query>
			<formula>/*floor 5 gets elevator 1 */

(request_handler(1).checking_input &amp;&amp; request_handler(1).current_req == 5) --&gt; (main_control(1).stopped &amp;&amp; current_floor[1] == 5)
</formula>
			<comment> - PROP 5 - floor 5</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[]
(
	forall(f:id_f)
	(
		(exists(e:id_e) (request_handler(e).is_req_for_lift(f)))
		and
		(target_floor == f imply exists(e:id_e)(request_handler(e).is_req_for_lift(f)))
		or 
		f == 0
	)
)</formula>
			<comment>PROP 4 --- safety       --- 

/* Each floor (except the ground floor) can be reached, and only by the correct elevator */

/* The two most horrible days of these past few weeks were spent looking for this. */
</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment>PROP 3 --- Reachability --- 

/* The amount of requests can reach the threshold value (in the description of Task 1 the value is 5) when the elevator is on the ground floor. */
/* There exists a path where the elevator is on the ground floor and the amount of requests equals 5 */
</comment>
		</query>
		<query>
			<formula>E&lt;&gt; 
(
	request_handler(0).len == request_handler(0).size
	and 
	current_floor[0] == 0
)</formula>
			<comment> - PROP 3 - elevator 0</comment>
		</query>
		<query>
			<formula>E&lt;&gt; 
(
	request_handler(1).len == request_handler(1).size
	and 
	current_floor[0] == 0
)</formula>
			<comment> - PROP 3 - elevator 1</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment>PROP 2 --- safety       --- 

/* The elevator never travels with its door open. */
/* safety property: something bad will never happen */
/* OR IN UPPAAL - something good is invariantly true */

/* The elevator always travels with its door closed. */</comment>
		</query>
		<query>
			<formula>/* elevator 0 */

A[] (main_control(0).moving imply cabin_door(0).closed)
</formula>
			<comment> - PROP 2 - elevator 0</comment>
		</query>
		<query>
			<formula>/* elevator 1 */

A[] (main_control(1).moving imply cabin_door(1).closed)
</formula>
			<comment> - PROP 2 - elevator 1</comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>PROP 1 -V- safety?      --- 

/* The elevator control unit is deadlock-free.*/</comment>
		</query>
	</queries>
</nta>
